24. 

도커파일에서 사용할 수 있는 하위 명령어
이미지와 컨테이너가 작동하는 방식

코드를 수정한다고 해보자
실행중인 애플리케이션에 바로 적용하는데 아주 작은 변동사항

기존의 이미지를 다시 컨테이너에 올리면 변동사항 적용x

이미지는 만들어질 때 그 당시의 소스코드를 복사하여(스냅샷) 올린 상태
	=> 이후에 수정된 사항은 이미지내의 소스코드에 반영 안됨, 이미지는 읽기 전용!
	=> 코드 수정사항을 반영하려면 이미지를 다시 빌드해야함
	
===============================================================
25. 

이미지는 "레이어 기반"
=> 이미지를 빌드하거나 다시 빌드할 떄 변경된 부분의 명령과 그 이후의 코드가 재평가됨

한번 이미지를 빌드하고 이후에 코드의 수정없이 다시 빌드하게되면
	=> 빌드 속도 매우 빠름, using cache
	=> 일부만 변경할 경우 일부는 캐시 사용, 일부 명령어는 새로 실행

이런것을 "레이어 기반 아키텍쳐"

한 레이어가 다시 빌드되면 이후 명령어들은 새로 실행

ex)
...
copy . /app
run npm install
...

이런경우에  코드에 수정이 발생하면 무조건 copy명령어를 새로 실행
그렇다면 항상 이미지를 빌드할 때 npm install 실행 
	=> 사실 근데 npm install은 안바뀌니까 좀 불필요

도커 최적화 가능!
...
COPY package.json /app // 소스코드 복사전에 npm install
RUN npm install
COPY . /app
...

소스코드를 수정해도 npm install은 다시 실행되지 않음

==================================================================
26. 요약

도커는 코드에 관한 모든것
이미지에 우리의 코드와 환경을 모두 넣자
도커파일에 어떤 환경과 코드를 넣을것인지 세팅한다
내부포트를 몇으로 열건지 설정한다
이미지는 컨테이너를 생성할 템플릿이다.
컨테이너는 이미지를 기반으로 실행되는 애플리케이션
하나의 이미지로 여러개의 컨테이너생성 가능

"앱을 포함하는 격리된 환경, 그 앱을 실행하는데 필요한 모든것, 모든 환경, 도구를
	컨테이너 안에 모두 포함시키는 것" => 도커