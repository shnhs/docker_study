===============================================================
2. 도커란

도커? - 컨테이너를 생성하고 관리하기 위한 도구

컨테이너? - 표준화된 SW 유닛, 코드패키지 + 해당 코드를 실행하는데 필요한 종속성

===============================================================
3. 

도커와 컨테이너 사용의 이점
- 코드의 실행 환경을 통일할 수 있다.
- 개발 환경을 통일할 수 있다.
- 프로젝트간 버전 관리를 용이하게 가능

===============================================================
5. VM vs Docker

버츄얼머신
=> (Host 머신, 시스템) | (Virtual OS) | (Libraries, Dependencies) | (APP)
    실제로 개별로 동작하는 하나의 컴퓨터로 생각하면 됨

Docker
=> (Host System) | (OS built Container Support) | (Docker Engine) | (Container)
    운영체제, 환경설정 등 거대한 부분 생략 가능

===============================================================
13.

*********************

[DockerFile]

FROM node:14    # Node14 베이스 이미지

WORKDIR /app    # 컨테이너 파일 시스템 경로

COPY package.json .

RUN npm install     # 필요한 모든 종속성 설치

COPY . .    # 다른 코드 복사

EXPOSE 3000     # 컨테이너 외부에서 수신할 포트 지정

CMD [ "node", "app.mjs" ]

*********************

===============================================================
18. 이미지와 컨테이너

컨테이너 - Unit of SW. 이미지의 구체적인 실행 인스턴트

이미지 - 컨테이너 설계도, 모든 설정명령과 모든 코드가 포함된 공유가능 패키지

이미지를 통해 컨테이너를 생성
하나의 이미지를 사용해서 여러 컨테이너 생성 가능

===============================================================
19. 외부 이미지 사용

docker run -it node
    => -it 옵션은 도커에게 컨테이너 내부에서 
        호스팅머신으로 대화형 세션을 노출하고자 하는 옵션

===============================================================
21. DockerFile로 자체 이미지 빌드

DockerFile - 도커에서 인식되는 특수한 이름

...

[DockerFile]

# base가 될 운영체제 이미지
FROM node

# 명령어들이 실행될 경로 지정
WORKDIR /app 

COPY package.json /app

# 필요한 명령어 입력
RUN npm install

# 앞은 컨테이너 외부 경로 - . 이라면 Dockerfile이 포함된 경로의 모든 하위 소스
# 뒤에는 컨테이너 내부 경로, ./ 라면 현재 작업경로로 지정
COPY . /app

# 특정 포트에 노출 세팅
EXPOSE 80

# 이미지 기반의 컨테이너가 생성될 때 마다 해당 명령어 실행 
CMD [ "node", "server.js" ]

...

===============================================================
22. 자체 이미지 실행

docker build [dockerFile 경로] - dockerFile에 따라 이미지 빌드

docker run -p [로컬포트]:[도커 포트] [imageId]
    => -p 옵션으로 포트노출

===============================================================
24. 

도커파일에서 사용할 수 있는 하위 명령어
이미지와 컨테이너가 작동하는 방식

코드를 수정한다고 해보자
실행중인 애플리케이션에 바로 적용하는데 아주 작은 변동사항

기존의 이미지를 다시 컨테이너에 올리면 변동사항 적용x

이미지는 만들어질 때 그 당시의 소스코드를 복사하여(스냅샷) 올린 상태
	=> 이후에 수정된 사항은 이미지내의 소스코드에 반영 안됨, 이미지는 읽기 전용!
	=> 코드 수정사항을 반영하려면 이미지를 다시 빌드해야함
	
===============================================================
25. 

이미지는 "레이어 기반"
=> 이미지를 빌드하거나 다시 빌드할 떄 변경된 부분의 명령과 그 이후의 코드가 재평가됨

한번 이미지를 빌드하고 이후에 코드의 수정없이 다시 빌드하게되면
	=> 빌드 속도 매우 빠름, using cache
	=> 일부만 변경할 경우 일부는 캐시 사용, 일부 명령어는 새로 실행

이런것을 "레이어 기반 아키텍쳐"

한 레이어가 다시 빌드되면 이후 명령어들은 새로 실행

ex)
...
copy . /app
run npm install
...

이런경우에  코드에 수정이 발생하면 무조건 copy명령어를 새로 실행
그렇다면 항상 이미지를 빌드할 때 npm install 실행 
	=> 사실 근데 npm install은 안바뀌니까 좀 불필요

도커 최적화 가능!
...
COPY package.json /app // 소스코드 복사전에 npm install
RUN npm install
COPY . /app
...

소스코드를 수정해도 npm install은 다시 실행되지 않음

==================================================================
26. 섹션1 요약

도커는 코드에 관한 모든것
이미지에 우리의 코드와 환경을 모두 넣자
도커파일에 어떤 환경과 코드를 넣을것인지 세팅한다
내부포트를 몇으로 노출할건지 설정한다
이미지는 컨테이너를 생성할 템플릿이다.
컨테이너는 이미지를 기반으로 실행되는 애플리케이션
하나의 이미지로 여러개의 컨테이너생성 가능

"앱을 포함하는 격리된 환경, 그 앱을 실행하는데 필요한 모든것, 모든 환경, 도구를
	컨테이너 안에 모두 포함시키는 것" => 도커
	
==================================================================	