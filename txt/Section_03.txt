==================================================================
43. 데이터 카테고리

애플리케이션(소스코드 + 실행 환경) 
=> 개발 작성 코드 패키지 + 이미지에 있는 레이어; 빌드되면 데이터는 고정 

2개의 다른 데이터 카테고리

temp App Data
=> 앱 실행 동안 생성된 데이터 ex) 폼에 입력된 데이터
    일시적 데이터로 장기간 보관x
    이미지가 아닌 컨테이너에 저장
    컨테이너는 read-write 레이어
    
permanent App Data
=> 영구적으로 저장할 데이터, 지속 되어야 함
    컨테이너가 재실행 되더라도 지속되어야 함
    
영구 데이터는 read-write이지만 영구적으로 지속되야함
=> 볼륨 이라는 개념의 도움을 받아야 함

==================================================================
44. 실제 분석

temp에 임시 파일을 생성하고
feedback 폴더에 해당 파일이 존재하지 않으면 새 파일 생성

==================================================================
45. 데모 앱 구축

컨테이너에는 이미지를 기반으로 하는 자체 파일 시스템이 있음

따로 지정하지 않으면
컨테이너 파일 시스템 - 로컬 파일 시스템 사이 커넥션은 없음

==================================================================
46. 문제 이해

컨테이너를 삭제하게 되면 내부 파일은 삭제
단순히 중지 하고 재시작하면 read-write 레이어의 파일 시스템은 유지

container remove 는 데이터 완전 삭제됨

==================================================================
47. 볼륨

도커에는 볼륨이라는 내장기능 
=>데이터를 유지하도록 도움을 준다

일단 볼륨이 뭐냐 
=> 호스트 머신의 폴더(하드 드라이브), 도커 컨테이너 내부의 폴더에 매핑됨
    컨테이너 내부의 폴더를 호스트 머신의 외부 폴더와 연결
    서로 변경사항을 반영함
    볼륨을 통해 데이터 유지
    컨테이너가 제거되어도 볼륨은 유지
    컨테이너는 볼륨에 파일을 읽고 쓸수 있음
    
==================================================================
48. 

볼륨 추가 => 쉽게는 도커 파일에 명시하기?

***
VOLUME ["[컨테이너 파일시스템 내부의 경로]"]
***

==================================================================
49. 명명된 볼륨

도커의 외부 데이터 저장 메커니즘 => 볼륨, 마운트

두 타입의 볼륨

1. 익명 볼륨
VOLUME ["[컨테이너 파일시스템 내부의 경로]"]
=> 이미지에 익명 볼륨을 할당

2. 명명된 볼륨

두 경우 모두 도커가 일부 폴더와 경로를 호스트 머신에 설정

익명볼륨일경우
단 내가 모름. docker volume으로 볼 수 있음
docker volume ls
단 익명 볼륨이기 떄문에 컨테이너가 존재할때만 존재함
따라서 정확히 어디 있는 지 찾기 힘듬

명명 볼륨일 경우
컨테이너 종료 후에도 볼륨이 유지 -> 하드드라이브의 폴더가 유지
컨테이너 재시작하면 볼륨이 복구, 데이터도 복구
영구적인 데이터나 직접 볼 필요가 딱히 없는 데이터에 사용

명명 볼륨은 도커 파일이 아니라 컨테이너 실행 할 때 명시함
docker run ~~ -v [명명 볼륨 이름]:[볼륨과 연결할 컨테이너 내부 경로] ~~

==================================================================
50. 익명 볼륨 제거

--rm 옵션이 없으면 익명 볼륨이 자동으로 제거되지 않음

사용하지 않는 익명 볼륨 삭제
docker rm [volume_name]
docker volume prune

==================================================================
51. 바인드 마운트

호스트머신 상에 매핑될 컨테이너의 경로를 내가 설정
영구적이고 편집 가능한 데이터에 적합

명명 볼륨은 영구적인 저장은 가능하지만 호스트 머신에 어디 저장되는지 모름
마인드 마운트는 영구적인 저장도 가능하고 호스트 머신 어디 저장되는지도 암


==================================================================
52. 

바인드 마운트랑 익명 볼륨을 같이 사용
=> 두 볼륨을 따로 관리 할 수 있음

==================================================================
53. Nodemon 사용

특정 컨테이너의 웹 서버를 재시작 하기
=> 가장 쉬운 방법은 컨테이너 내렸다가 재시작하기

nodemon dependency 설정으로 파일 변경 감시자 사용

==================================================================
54. 볼륨, 바인드 마운트 요약

docker run -v /app/data                 => 익명 볼륨 생성
docker run -v data:/app/data            => data 라는 이름의 명명 볼륨 생성
docker run -v /path/to/code:/app/data   => 호스트 머신의 폴더를 가르키는 바인드 마운트

익명볼륨은 
- 컨테이너에 연결된 익명 볼륨 생성, 컨테이너가 지워지면 같이 삭제
--rm 옵션을 같이 사용하면 익명 볼륨 같이 삭제, 컨테이너 데이터 공유 불가
컨테이너에 이미 존재하는 데이터를 잠그는데 유용(다른 모듈에 의해 덮어쓰여지는 것 방지)
호스트 머신에 폴더를 생성하지만 어디있는지 모름

명명 볼륨은
- Dockerfile에서 생성 안함
-v 옵션으로 지정, 일반적으로 생성, 특정 컨테이너와 연결되는게 아님
컨테이너 삭제되어도 유지, 여러 컨테이너에서 데이터 사용 가능

바인드 마운트는
- 호스트 머신에 데이터가 저장되는 위치를 알고있음
다수의 컨테이너와 사용가능
컨테이너와 데이터 공유 가능

==================================================================
56. 읽기 전용 볼륨

기본적으로 볼륨은 read-write

컨테이너에서 바인드 마운트를 read-only로 변경 가능
[host/path]:[container/path]:ro
ro 옵션을 추가하면 도커가 그 폴더나 하위 폴더에 write불가능

==================================================================
57. Docker 볼륨 관리

docker volume ls    도커에 의해 관리되고 있는 volume 리스트를 보여줌

바인드 마운트는 ls에 안뜸 
바인드 마운트는 내가 알고있는 로컬 폴더를 컨테이너 내부와 바인딩

docker volume create [name]     도커 볼륨 직접 생성
docker volume inspect [volume]  해당 볼륨에 대한 정보 보기

==================================================================
58. COPY vs 바인드 마운트

COPY는 코드의 스냅샷을 가짐
프로덕션 환경에서는 코드의 스냅샷을 가지고 있는 이미지가 필요함

==================================================================
59. .dockerignore

앞에 .이 있음을 유의하자
gitignore와 유사함

COPY 명령으로 복사하지 않을 특정 내용 혹은 폴더을 지정

일반적으로 애플리케이션이 올바르게 실행되는데 필요없는 모든 것을 추가

==================================================================
61. 환경변수 .env 작업

인수(ARG), 환경변수(ENV)

도커는 빌드 타임 인수와 런타임 환경변수 지원

인수
dockerFile에서 특정 값을 추출하는데 사용할 수 있음

환경변수
dockerFile에서 사용, 전체 애플리케이션 코드에서 사용 가능

컨테이너나 이미지에서 하드코딩을 줄여줌

dockerFile에서 환경변수를 사용하려면
ENV [Key] [Value]
다른 구문에서 사용할 경우 $[Key]와 같은 형태로 사용

docker run ~~ --env [Key]=[value] ~~
docker run ~~ --e [Key]=[value] ~~
여러개의 환경변수 세팅 가능

따로 환경변수 파일로 만들 수 있음
--env-file [환경변수 파일 경로]

==================================================================
63. 빌드인수(ARG) 사용

빌드인수 ARG
dockerFile에 다양값을 플러그인 하러간 하드코딩 하지 않아도
빌드할 때 다른 값을 넣을 수 있는 인수

빌드 인수는 코드상에서는 사용불가
dockerFile에서 사용가능, 단 CMD에서는 사용 불가

이미지 빌드 시
docker build ~~ --build-arg [Key] = [value] .

==================================================================
64. 요약

컨테이너는 도커의 핵심, 데이터를 읽고 쓸 수 있음
컨테이너는 이미지(read-only)위에 read-write 레이어를 추가

컨테이너가 제거되면 내부 기록 데이터가 소실
소실 되면 안되는 데이터가 있기 때문에 볼륨을 사용

볼륨은 컨테이너가 실행되는 호스트 머신상의 폴더
볼륨은 도커에 의해 관리

명명 볼륨
컨테이너가 제거되도 살아남음

익명 볼륨
컨테이너가 제거되면 없어짐
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
==================================================================
docker run -d --rm -p 3000:80 --name feedback-app -v feedback:app/feedback -v "C:\git\docker_study\3.2 data-volumes-07-added-dockerignore:/app:ro" -v /app/node_modules -v /app/temp feedback-node:env