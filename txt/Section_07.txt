==================================================================
101. 모듈 소개

유틸리티 컨테이너??

전형적인 컨테이너는 Environment + App

유틸리티 컨테이너는 Environment만 가지는 컨테이너라고 정의
시작할 때 특정 앱을 시작하는것이 아니라
특정 작업을 실행하기 위해 지정한 명령과 함께 사용

==================================================================
102. 왜 유틸리티 컨테이너??

노드 설치 없이 애플리케이션 만들기
일단 노드 앱에 대한 구성이 포함된 package.json이 필요

보통은 새 노드 프로젝트를 위해 npm init으로 생성

근데 컴퓨터에 node가 없으면 명령어 사용 못함

프로젝트를 컨테이너에 넣을 수는 있지만
초기 생성에는 기반이 되는 툴이 시스템에 설치되어 있어야함
이를 유틸리티 컨테이너로 쉽게 해결할 수 있음

==================================================================
103. 컨테이너에서 명령을 실행하는 다양한 방법

docker run -it -d node 하면 인터렉티브 detached 컨테이너 실행
docker exec 명령으로 실행중인 컨테이너에서 특정 명령을 실행할 수 있음

그러나 프로젝트를 생성은 할 수 있는데 컨테이너 안쪽이라서 접근 할수가 없음

아무튼 docker exec 는 메인 프로세스를 중단하지 않고 컨테이너 내부를 접근할 수 있음

==================================================================
103. 첫 번째 유틸리티 컨테이너 구축

일단 Dcokerfile 만듬

...
FROM node:14-alpine
WORKDIR /app
...

가볍게 node 만 구성할 수 있도록 이미지 빌드

docker run -it node-util npm init
=> node util 이미지를 실행하는데 npm init 명령어로 시작

컨테이너에서 생성한 것을 호스트 머신애 미러링하고자 함
=> 바인드 마운트를 사용

docker run -it -v \git\docker_study\Section07\docker-complete:/app node-util npm init

==================================================================
104. ENTRYPOINT 활용

ENTRYPOINT 명령어를 Dcokerfile에서 사용가능
CMD명령어와 유사하지만 차이점이 있음

CMD 명령어는 docker run 에서 이미지뒤에 오는 명령어가 CMD 명령어를 덮어씌움

ENTRYPOINT 명령어는 docker run 에서 이미지 뒤에 오는 명령어가
ENTRYPOINT 뒤에 추가됨

==================================================================
106. Docker-compose 사용


==================================================================
107. 모듈 요약

특정 명령을 실행만 할수있는 환경을 만드는 컨테이너 만들기
유틸리티 컨테이너



==================================================================



