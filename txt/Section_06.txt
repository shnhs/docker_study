==================================================================
90. 모듈 소개

각각의 컨테이너를 실행하는 명령어가 너무 길고 복잡하다!

docker-compose 로 조금 더 편하게 할 수 있다.

==================================================================
91. docker-compose란?

도커 컴포즈는 docker build와 docker run 명령어를 대체할 수 있는 도구
다수의 build와 다수의 run을 하나의 구성파일로 가능하도록 하는 명령 셋

그러나 도커 컴포즈는 커스텀 이미지를 위한 dockerfile을 대체하지는 않음
도커 컴포즈는 dockerfile과 같이 사용

도커 컴포즈는 이미지나 컨테이너를 대체하지는 않음

도커 컴포즈는 다수의 호스트에서 다중 컨테이너를 관리하는데 적합하지는 않음
하나의 동일한 호스트에서 다중 컨테이너를 관리하기 좋음

도커 컴포즈 시작?
일단 도커 컴포즈 파일부터 시작

컴포즈 파일에서 정의할 수 있고 정의해야 하는 가장 중요한 거
=> service, 즉 컨테이너

게시할 포트도 정하고, 환경 변수도 정하고, 볼륨도 정하고, 네트워크도 정할 수 있음

==================================================================
92. 컴포즈 파일 만들기

프로젝트 폴더에 docker-compose.yml 파일 생성
yml 혹은 yaml은 구성 옵션 간의 종속성을 표현하는 특수 텍스트 포맷

yml파일에 다중 컨테이너 환경, 프로젝트 설정을 기재

#1 가장 처음 버전을 기재해야함, 앱이나 파일 버전이 아닌 컴포즈 버전
컴포즈 버전은 사용가능한 기능에 영향을 미침

#2  그 다음은 servie 키 이름을 기재
yml은 들여쓰기로 종속성을 표현하기 때문에 잘 기재해야함
같은 들여쓰기 뎁스는 같은 하위 요소
서비스 하위 요소로는 컨테이너를 지정

#3 각 컨테이너 구성을 작성하면 됨

==================================================================
93. compose 파일 구성 자세히

#1 먼저 사용할 이미지키를 지정
image: {이미지이름}

#2 도커 컴포즈는 --rm 이랑 -d 옵션이 디폴트임

#3 볼륨 추가
볼륨 아래에는 하위 요소 사용함
사용하고자 하는 볼륨에 - 붙여서 명시
ex) - data:/data/db   {볼륨 이름}:{컨테이너 내부 경로}\

#4 환경변수
environmnet:
  {환경변수 필드}: value

환경 변수에 파일로 지정할 수 있음
env_fil:
  - {환경 변수 파일에 대한 상대 경로}
  - ./env/mongo.env

#5 네트워크
사실 보통 네트워크는 따로 지정안해도 됨
도커 컴포즈를 사용하면 도커가 이 컴포즈 파일에 특정된 모든 서비스에 대해
새로운 환경을 생성하고 모든 서비스를 해당 네트워크에 추가함

#6 볼륨설정
version이나 service와 같은 뎁스로 작성해야함
서비스에서 사용중인 명명 볼륨이 나열되어야 함
volumes:
  data: 
이름만 지정하는데, 이게 맞는 거임
익명 볼륨과 바인드 마운트는 명시 안해도 됨

==================================================================
95. docker-compose up, down

docker-compose.yml이 있는 디렉토리에서
docker-compose up 하면 컨테이너 시작 + 필요한 모든 이미지를 가져와 빌드함
docker-compose up -d 로 detached로 시작가능

docker-compose down 으로 실행중인 컨테이너 내림
-v 옵션으로 볼륨도 같이 삭제할 수 있음

==================================================================
96. 다중 컨테이너 작업

이미지를 빌드하여 사용하는것 대신
도커 컴포즈가 이미지를 빌드하는데 필요한 모든 정보를 제공할 수 있음

#1 이미지 빌드
컨테이너 옵션에 build 옵션 사용
dockerfile이 있는 경로를 지정해주면 됨

혹은 build옵션 아래에 중첩 옵션 지정가능
context로 경로 명시 / dockerfile로 어떤 도커파일을 사용할지 명시
context는 dockerfile경로이기도 하고 이미지가 빌드될 경로이기도 함
context 경로는 이미로 복사될 경로를 포함하도록 설정 필요 

#2 포트 게시
port:
  - 'host_port:container_port'

#3 바인드 마운트
volumes:
  - {.yml기준으로의 상대경로}:{컨테이너 경로}
docker run 명령어와 다르게 .yml 파일 기준의 상대경로로 지정해줄 수 있음
바인드 마운트는 바깥에 volumes 목록에 추가 안해도 됨

#4 익명 몰륨
volumes:
  - /app/node_modules
volumes 목록에 추가 안해도 됨

#5 depends on 옵션
도커 컴포즈에만 있는 옵션
컴포즈로 여러개 컨테이너를 사용할 경우 어떤 컨테이너가 다른 컨테이너에 의존할 수 있음
예를 들어 db컨테이너가 있어야 backend가 연결할 수 있다던가
depends:
  - 해당 서비스가 의존할 서비스

도커 컴포즈에 service 이름이랑
실제로 만들어진 컨테이너 이름이랑 같지는 않음
컴포즈에 명시된 이름은 도커에 의해서 기억됨
코드 내에서는 해당 이름을 사용할 수 있음

==================================================================
97. frontEnd 컨테이너 추가

인터렉티브 컨테이너는 과연 어떻게 추가??

#1 인터렉티브 모드 지정1
  stdin_open: true 지정 - 개방형 입력이 필요함을 도커에게 알림
  tty: true 지정

==================================================================
98. 이미지 빌드, 컨테이너 이름 지정

docker-compose build - 이미지를 강제로 리빌드시킴

컨테이너 이름도 지정하려면 컴포즈 파일에 container_name 옵션 지정

==================================================================
99. 모듈 요약

도커 컴포즈로 바인드 마운트를 간편하게 상대경로로 쓸 수 있음
단일 컨테이너 설정도 자주 사용
명령 유지나 관리가 쉽다
그렇지만 컴포즈가 dockerfile을 대체하지는 않음

==================================================================


