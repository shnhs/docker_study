==================================================================
67. 컨테이너 - WWW 통신

컨테이너에서 외부로 WWW 요청을 보내는 경우
외부 더미 API를 사용하는 컨테이너를 예제로 사용
이 노드 애플리케이션은 다른 사이트에 HTTP 요청을 보냄
이제 컨테이너에 이 노드 앱을 집어 넣을거임

==================================================================
68. 컨테이너에서 로컬 호스트 머신으로의 통신

컨테이너는 로컬 머신의 무언가와 통신 할 수도 있음
예를 들면 DB

데모앱에는 DB도 사용 할 코드도 있음 - 몽고

==================================================================
69. 컨테이너-컨테이너 통신

예를 들면 SQL같은 DB컨테이너
다중 컨테이너를 구성하는 거는 매우 일반적

도커 컨테이너를 사용하면
각 컨테이너는 한가지 주요 작업만 수행하는 것이 강력히 권장

==================================================================
70. 데모 앱 분석

axios, express, body-parser, mongoose 같은 종속성 포함

결론적으로 앱은 웹 API를 빌드함
4개의 엔드포인트를 포함

GET     - /favorites
POST    - /favorites
GET     - /movies
GET     - /people

/movies 와 /people은 스타워즈 더미 API 사용
데이터를 받아와서 몽고DB에 저장할 예정

POST /favorites 으로 데이터를 DB에 저장. 북마크 같이
mongoose를 사용함
GET /favorites 으로 저장한 북마크 가져오기

==================================================================
71. 컨테이너 만들어서 WWW 통신

주어진 앱 이미지는 몽고DB랑은 상관이 없다
노드 앱에 관한 코드만 포함할 뿐

그냥 실행하면 몽고DB 커넥션 에러 발생

일단 컨테이너에서는 내부로부터 밖의 WWW의 http 요청을 보내는것이 가능
특별한 설정 없이 이거는 가능함

docker run --name favorites -d --rm -p 3000:3000 favorites-node

==================================================================
72. 호스트 통신 작업을 위한 컨테이너

(로컬 머신에 몽고DB를 설치했을 경우)
로컬 호스트의 무언가와 도커화 된 컨테이너가 통신이 필요한 경우
localhost 대신 host.docker.internal 사용

해당 주소는 도커에 의해 특수하게 인식됨
호스트 머신의 IP로 자동 변환됨

==================================================================
73. 컨테이너간 통신

노드 앱 용 컨테이너 + 몽고DB 컨테이너 필요

dockerHub에서 몽고DB 공식 이미지를 찾을 수 있음

docker run mongo    -> 몽고DB 공식 이미지 사용
docker run -d --name mongoDB mongo

docker container inspect [containerID]      컨테이너 검사
여기서 IP 정보를 볼 수 있음

몽고DB 커넥션 정보에 해당 IP를 넣고 컨테이너 띄우면 잘 동작함

근데 몬가 불편함, IP 주소같은거 찾아야함
몽고DB 주소가 변하면 하드 코딩이라 몬가 아쉬움

==================================================================
74. Docker Networks

여러개 컨테이너가 있을 때 서로의 통신을 허용함

docker run --network [my_network] 로 실행하면
여러 컨테이너를 하나의 동일한 네트워크에 밀어넣을 수 있다.
그러면 이전에 수동으로 하던 IP 조회같은거를 도커가 알아서 해줌


docker run -d --name mongoDB --network favorites-net  mongo
그냥 이렇게 실행하면 네트워크를 찾을 수 없다고 나옴
도커는 네트워크를 자동으로 생성하지 않음

docker network create [네트워크 이름]     도커 네트워크 생성
docker network ls   네트워크 리스트

네트워크는 만들었는데, 그럼 어떻게 컨테이너끼리 통신?
같은 네트워크에 있는 컨테이너라면 IP주소 대신 컨테이너 이름 사용가능

docker run --name favorites -d --rm -p 3000:3000 --network favorites-net favorites-node\

컨테이너끼리 통신은 일반적으로 안됨
1. 수동으로 IP를 지정해주거나
2. 같은 네트워크로 묶어주거나

몽고DB 컨테이너를 띄울때 포트게시를 안했는데
외부에서 접속을 안하기 때문
포트 게시는 컨테이너 외부 혹은 로컬 호스트에서 접속하기 위함
컨테이너 끼리 통신만 할꺼면 포트게시 굳이 안해도 됨

==================================================================
75. Docker IP

host.docker.internal
도커가 소스코드를 고치는것이 아니라
이름을 보고 알아서 인식함

컨테이너에서 요청을 전송할 때만 자동 IP 변환이 발생

==================================================================
76. Docker network 드라이버

[bridge]
디폴트 드라이버. 모듈에 나타난 동작을 제공
즉, 컨테이너가 동일한 네트워크에 있는 경우 이름으로 서로를 찾을 수 있음
대부분 bridge 드라이버 사용

[host]
스탠드 얼론 컨테이너의 경우, 컨테이너와 호스트 시스템간 격리가 제거
localhost를 네트워크로 공유함

[none]
모든 네트워킹 비활성화

==================================================================
77. 요약

